<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: haskell | William Roe&#146;s blog]]></title>
  <link href="http://blog.wjlr.org.uk/blog/categories/haskell/atom.xml" rel="self"/>
  <link href="http://blog.wjlr.org.uk/"/>
  <updated>2015-01-17T03:28:35+00:00</updated>
  <id>http://blog.wjlr.org.uk/</id>
  <author>
    <name><![CDATA[Will Roe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Further Haskell exploration]]></title>
    <link href="http://blog.wjlr.org.uk/2012/02/07/further-haskell-exploration.html"/>
    <updated>2012-02-07T00:00:00+00:00</updated>
    <id>http://blog.wjlr.org.uk/2012/02/07/further-haskell-exploration</id>
    <content type="html"><![CDATA[<p>Today I decided to embark on an exploration of Haskell web
development. I have previously bootstrapped a basic
<a href="http://snapframework.com/">Snap</a> setup but never got into actual
hacking. Today I decided to give <a href="http://www.yesodweb.com/">Yesod</a> a
go. I ran into a number of difficulties that drained away all my spare
time this evening but in the end I feel like I&#8217;m ready to dive in
tomorrow.</p>

<p>I started off by attempting to install Yesod, with a simple <code>cabal
install yesod</code>. This command took about 10 minutes to finish compiling
dependencies on my ThinkPad X61 before it died with an error. The
problem seemed to be the version of
<a href="http://hackage.haskell.org/platform/">haskell-platform</a> was rather
out-of-date, meaning a tool, called <code>alex</code> was too old for Yesod. To
solve this rather small issue I took the rather drastic step of
upgrading Ubuntu on the ThinkPad to
<a href="https://wiki.ubuntu.com/PrecisePangolin">Precise Pangolin</a> because
this includes the latest haskell-platform&#8230;and its all new and&#8230;just
because! This is Ubuntu after all - trigger happy upgrades are the
name of the game.</p>

<p>Meanwhile, in Mac land. While that upgrade was running I tried to run
the new yesod web app on a Mac. Unfortunately I ran into all the
problems I&#8217;ve encountered before with cabal-dev on OS X.</p>

<p>Firstly there&#8217;s some weirdness with cabal-dev being set to install
everything in the system library location. This just makes no sense for
cabal-dev - the whole point is for it to install libraries in a
vendored, per-project location - not interfering with system
libraries. It manifested itself as asking for a password all the time
(turn on verbose <code>-v3</code> to see it running all cabal commands with sudo
- O_o). To fix that you edit the config file, outlined in a
  <a href="http://passingcuriosity.com/2011/cabal-dev-configuration-tweaks/">blog post I found</a>. Annoying.</p>

<p>Another problem I had was ghc/ld spamming the terminal with loads of
linker warnings. This really slowed down compilation. I didn&#8217;t really
solve this (happened on my Mac Mini - didn&#8217;t happen on my work MacBook
Air). I remember having to set options for GHC to silence that crap,
but I forget the details&#8230;</p>

<p>In order to get it all working on my Mac I:</p>

<ul>
<li>Uninstalled haskell-platform (this is homebrew installed for me)</li>
<li>Re-installed haskell-platform</li>
<li>cabal installed cabal-dev, yesod</li>
</ul>


<p>Everything worked then. There&#8217;s also strange voodoo you have to run to
unregister old packages - <code>brew info haskell-platform</code> splits out the
necessary commands.</p>

<p>After all that, things worked&#8230;mostly. Currently there seems to be
some car crash of dependencies caused by a new release of something
called tls-extras. A helpful stranger in IRC (#yesod) told me to
<code>cabal-dev install tls-extra-0.4.2.1</code> - this forces a working version
of that library and then you can happily install yesod and
everything&#8217;s groovy.</p>

<p>Who said Haskell was difficult? Not me.</p>

<p>So now I have a skeleton Yesod project up and running and it&#8217;s all
looking very promising. The helper script for creating projects gave
me some confidence - specifically asking if I wanted sqlite, postgres,
MongoDB or nothing seemed pretty good to me - this doesn&#8217;t appear to be
a web framework/persistence system tied to a particular way of doing
things.</p>

<p>The main reason why I decided to dive into Yesod however was the high
volume of interesting yesod-related blog traffic - this is a pretty
crucial metric in gauging the health of a library community in my
opinion and my RSS reader has been bombarded with posts about it so I
felt I had to see what all the fuss was about.</p>

<p>Hopefully happy Haskell hacking henceforth</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Haskell]]></title>
    <link href="http://blog.wjlr.org.uk/2011/07/12/learning-haskell.html"/>
    <updated>2011-07-12T00:00:00+01:00</updated>
    <id>http://blog.wjlr.org.uk/2011/07/12/learning-haskell</id>
    <content type="html"><![CDATA[<p>So I have started to learn Haskell (again - I learned the basics at university for the Functional Programming class and loved it, I have since forgotten most of that).</p>

<h2>Haskell is weird</h2>

<p>When you first start out learning this language - or even just read some articles about it - the first thing that will strike you is that it seems completely obscure. The syntax is obscure, the concepts are obscure, but most of all - the language used to describe what things are is incredibly obscure. Every programming language community has evolved its own lingo of course and Haskell&#8217;s is awash with mathematics. If you subscribe to the planet Haskell RSS feed you will get the impression that Haskell is pretty much just an extension of Mathematics and is only used for &#8220;pure&#8221; problems and therefore completely irrelevant to real world problems. Then you will notice there&#8217;s a book called &#8220;Real World Haskell&#8221; and you&#8217;ll think it an anomaly, just some noise in the data.</p>

<h2>Why learn this?</h2>

<p>Apart from wanting to become a better programmer in general (which would explain why I&#8217;d want to learn functional programming in general and in more detail than I already do from Erlang and Clojure), I want to learn how Haskell can be a practical language - how it can help me create great products. I suspect that behind the terseness and high degree of greek characters is a toolkit that will be at least as empowering as Erlang/OTP has been. I want that toolkit.</p>

<h2>The elephant in the room</h2>

<p>Sooner or later you will arrive at the Haskell trial stage. In order to print anything out from your programme, or accept any input or read a file etc. you will have to use monads. At first the syntax will seem very strange, just a load of terse boilerplate for doing what more pragmatic languages make super easy, but you&#8217;ll think &#8220;whatever, let&#8217;s just get on with learning this thing&#8221;. At some point the tutorial or book you&#8217;re reading will have to explain monads to you. More than likely this is the point where you stared at the screen/page in disbelief and your heart sank as you realised you would have to understand level 3000 mathematics to print something on screen. For most people, this is the last they ever deal with Haskell.</p>

<p>Later on, a Haskell wizard will act all puzzled and amused that you found monads hard to understand. This will lower your self-esteem so low you consider giving up entirely and becoming a farmer instead. They will go on to tell you that you&#8217;ve been using monads the whole time in whatever programming language you like. They will explain how this is so and you will not be enlightened. It&#8217;ll sound all too convenient, just a bunch of semantic drivel.</p>

<p>The reason so many of us have such a frustrating initial experience with Haskell is that most of the books on the subject are appallingly badly written. Programming books are in general a complete shambles and very few are useful to anyone who isn&#8217;t already pretty hot at the whole thing anyway. If you were lucky enough to find a well-written helpful introduction to Haskell (there are some), then you might not be feeling this way. Also if you were born a Haskell wizard, this will sound like complete gobbledegook to you. But then you&#8217;re not really human now are you? Admit it.</p>

<p>Anyway, I will be attending the <a href="http://www.meetup.com/hoodlums/">Haskell hoodlums meetup</a> this Thursday so hopefully I&#8217;ll start understanding this thing. Don&#8217;t give up people! Good luck.</p>
]]></content>
  </entry>
  
</feed>
