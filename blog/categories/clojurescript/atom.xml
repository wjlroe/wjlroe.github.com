<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: clojurescript | Will Roe&#146;s blog]]></title>
  <link href="http://blog.wjlr.org.uk/blog/categories/clojurescript/atom.xml" rel="self"/>
  <link href="http://blog.wjlr.org.uk/"/>
  <updated>2015-04-04T05:01:19+01:00</updated>
  <id>http://blog.wjlr.org.uk/</id>
  <author>
    <name><![CDATA[Will Roe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi 2 speed]]></title>
    <link href="http://blog.wjlr.org.uk/2015/03/25/raspberry-pi-2-speed.html"/>
    <updated>2015-03-25T22:18:00+00:00</updated>
    <id>http://blog.wjlr.org.uk/2015/03/25/raspberry-pi-2-speed</id>
    <content type="html"><![CDATA[<p>I just benchmarked my new <a href="http://www.raspberrypi.org/products/raspberry-pi-2-model-b/">Raspberry Pi 2 Model B</a> against my old
<a href="http://www.raspberrypi.org/products/model-b/">Raspberry Pi 1 Model B</a> using the
<a href="https://github.com/clojure/clojurescript/wiki/Quick-Start">ClojureScript Quick Start Guide</a> (specifically timing the build
step):</p>

<!--more-->


<pre><code>time java -cp cljs.jar:src clojure.main build.clj
</code></pre>

<p>On the <a href="http://www.raspberrypi.org/products/model-b/">Raspberry Pi 1 Model B</a> this takes 61.59 seconds, whereas on
the new <a href="http://www.raspberrypi.org/products/raspberry-pi-2-model-b/">Raspberry Pi 2 Model B</a> this takes 18.42 seconds!</p>

<p><figure class="img fillwidth"><img src="http://blog.wjlr.org.uk/images/raspberrypi2.jpg"
alt="Raspberry Pi 2" title="Raspberry Pi 2"><figcaption>My Raspberry Pi
2 in a very fetching <a href="http://shop.pimoroni.com/products/pibow-coupe">PiBow Coup√© case</a></figcaption></figure></p>

<p>For comparison, on my MacBook Air (11-inch, Mid 2013, 1.4 GHz Intel
Core i5, 8GB RAM), while lots of software was running, so not a
complete fair test (the Pis were booted up into the console, not even
running X) this takes 5.75 seconds.</p>

<p>Considering the difference in specifications of these machines, the
Raspberry Pi 2 is remarkably fast. I could even load up and play with
<a href="http://sonic-pi.net/">Sonic Pi</a> pretty quickly (on the original Model B that took long
enough to make a cup of tea).</p>

<p>Looks like I&#8217;m going to be drinking less tea in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast string interpolation in ClojureScript]]></title>
    <link href="http://blog.wjlr.org.uk/2015/01/17/fast-string-interpolation-cljs.html"/>
    <updated>2015-01-17T03:30:00+00:00</updated>
    <id>http://blog.wjlr.org.uk/2015/01/17/fast-string-interpolation-cljs</id>
    <content type="html"><![CDATA[<p>In my
<a href="/2015/01/15/string-interpolation-clojure.html">previous post on string interpolation in Clojure</a>,
I benchmarked <code>&lt;&lt;</code> from <code>core.incubator</code> and it proved both useful and
performant. But can this useful macro be used from ClojureScript? Yes.</p>

<!--more-->


<p>Add <code>core.incubator</code> to your dependencies in <code>project.clj</code> of your
ClojureScript project:</p>

<pre><code class="clojure">(defproject some-project "1.0.0-SNAPSHOT"
  :dependencies [...
                 [org.clojure/core.incubator "0.1.3"]
                 ...]
</code></pre>

<p>Now you can require the <code>strint</code> macros in your ClojureScript source
(e.g. in <code>src/cljs/app/core.cljs</code>):</p>

<pre><code class="clojure">(ns app.core
  (:require-macros [clojure.core.strint :as strint]))
</code></pre>

<p>Now you can use the fast string interpolator thus:</p>

<pre><code class="clojure">(enable-console-print!)

(let [name "Ethel Smyth"
      profession "Composer"
      born 1858]
  (println
   (strint/&lt;&lt; "The person named ~{name} works as a ~{profession}
and was born in ~{born}")))
</code></pre>

<p>That&#8217;s it!</p>
]]></content>
  </entry>
  
</feed>
